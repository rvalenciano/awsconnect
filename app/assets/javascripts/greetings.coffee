# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/


document.addEventListener 'DOMContentLoaded', (event) ->
  connect.core.initCCP containerDiv,
  ccpUrl: "https://rvalenciano.awsapps.com/connect/ccp#/"
  loginPopup: true
  softphone:
    disableRingtone: true
    allowFramedSoftphone: true
  connect.contact subscribeToContactEvents
  connect.agent subscribeToAgentEvents
  return

subscribeToContactEvents = (contact) ->
  logInfoMsg 'Subscribing to events for contact'
  if contact.getActiveInitialConnection() and contact.getActiveInitialConnection().getEndpoint()
    logInfoMsg 'New contact is from ' + contact.getActiveInitialConnection().getEndpoint().phoneNumber
  else
    logInfoMsg 'This is an existing contact for this agent'
  logInfoMsg 'Contact is from queue ' + contact.getQueue().name
  logInfoMsg 'Contact attributes are ' + JSON.stringify(contact.getAttributes())
  contact.onIncoming handleContactIncoming
  contact.onAccepted handleContactAccepted
  contact.onConnected handleContactConnected
  contact.onEnded handleContactEnded
  return

handleContactIncoming = (contact) ->
  if contact
    logInfoEvent '[contact.onIncoming] Contact is incoming. Contact state is ' + contact.getStatus().type
  else
    logInfoEvent '[contact.onIncoming] Contact is incoming. Null contact passed to event handler'
  return

handleContactAccepted = (contact) ->
  if contact
    logInfoEvent '[contact.onAccepted] Contact accepted by agent. Contact state is ' + contact.getStatus().type
  else
    logInfoEvent '[contact.onAccepted] Contact accepted by agent. Null contact passed to event handler'
  return

handleContactConnected = (contact) ->
  if contact
    logInfoEvent '[contact.onConnected] Contact connected to agent. Contact state is ' + contact.getStatus().type
  else
    logInfoEvent '[contact.onConnected] Contact connected to agent. Null contact passed to event handler'
  return

handleContactEnded = (contact) ->
  if contact
    logInfoEvent '[contact.onEnded] Contact has ended. Contact state is ' + contact.getStatus().type
  else
    logInfoEvent '[contact.onEnded] Contact has ended. Null contact passed to event handler'
  return

subscribeToAgentEvents = (agent) ->
  logInfoMsg 'Subscribing to events for agent ' + agent.getName()
  logInfoMsg 'Agent is currently in status of ' + agent.getStatus().name
  agent.onRefresh handleAgentRefresh
  agent.onRoutable handleAgentRoutable
  agent.onNotRoutable handleAgentNotRoutable
  agent.onOffline handleAgentOffline
  return

handleAgentRefresh = (agent) ->
  logInfoEvent '[agent.onRefresh] Agent data refreshed. Agent status is ' + agent.getStatus().name
  return

handleAgentRoutable = (agent) ->
  logInfoEvent '[agent.onRoutable] Agent is routable. Agent status is ' + agent.getStatus().name
  return

handleAgentNotRoutable = (agent) ->
  logInfoEvent '[agent.onNotRoutable] Agent is online, but not routable. Agent status is ' + agent.getStatus().name
  return

handleAgentOffline = (agent) ->
  logInfoEvent '[agent.onOffline] Agent is offline. Agent status is ' + agent.getStatus().name
  return

logMsgToScreen = (msg) ->
  logMsgs.innerHTML = '<div>' + (new Date).toLocaleTimeString() + ' ' + msg + '</div>' + logMsgs.innerHTML
  return

logEventToScreen = (msg) ->
  eventMsgs.innerHTML = '<div>' + (new Date).toLocaleTimeString() + ' ' + msg + '</div>' + eventMsgs.innerHTML
  return

logInfoMsg = (msg) ->
  connect.getLog().info msg
  logMsgToScreen msg
  return

logInfoEvent = (eventMsg) ->
  connect.getLog().info eventMsg
  logEventToScreen eventMsg
  return


# ---
# generated by js2coffee 2.2.0